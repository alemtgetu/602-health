# -*- coding: utf-8 -*-
"""Neural_Net_Cancer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18_NQd1Ac1Nuz5XjqdO4vhj8wTwSOgjLw
"""

import pandas as pd
from google.colab import files

#uploaded = files.upload() #select the file
cancer_data = pd.read_csv("Breast_Cancer_data.csv", sep=',') #read the data into the class dataframe

cancer_data.describe() #there are 16 missing data points from the Bare Nuclei, we will replace the missing data with the average Bare Nuclei of the class of the missing data

cancer_data.head()

data_filtered = cancer_data[cancer_data['Bare Nuclei'] != '?'] #remove rows with missing data
data_filtered = data_filtered.astype('int64')
data_filtered.dtypes

mal_data = data_filtered[data_filtered['Class'] != 2] #all the malignant tumor data
mal_data.describe()

ben_data = data_filtered[data_filtered['Class'] != 4] #all the benign 
ben_data.describe()

can_dat = cancer_data.copy(deep = True)
def myfunc(Bare,Class):
  if Bare=='?' and Class == 2:
    Bare = 1
  elif Bare=='?' and Class == 4:
    Bare = 8
  else:
    Bare = Bare
  return Bare
can_dat['Bare Nuclei'] = can_dat.apply(lambda x: myfunc(x['Bare Nuclei'], x['Class']), axis =1)
can_dat = can_dat.astype('int64')
can_dat.dtypes
#list = can_dat['Bare Nuclei'].tolist()
#print(list)

input_data = can_dat[['Clump Thickness', 'Uniformity of Cell Size','Uniformity of Cell Shape', 'Marginal Adhesion','Single Epithelial Cell Size', 'Bare Nuclei', 'Bland Chromatin', 'Normal Nucleoli', 'Mitoses']]
results_data = can_dat[['Class']]
input_data_train = input_data.iloc[:350,:]
input_data_test = input_data.iloc[351:,:]

results_data_train = results_data.iloc[:350,:]
results_data_test = results_data.iloc[351:,:]

from sklearn.tree import DecisionTreeRegressor #import decisiontreeregressor from the sklearn libary 
cancer_model = DecisionTreeRegressor(random_state=1) #this is the base nn
cancer_model.fit(input_data_train,results_data_train) #trains it with the x and y data sets

from sklearn.metrics import mean_absolute_error
val_predictions = cancer_model.predict(input_data_test)

mean_absolute_error(results_data_test,val_predictions)